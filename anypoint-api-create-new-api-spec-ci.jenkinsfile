#!groovy
pipeline {
    agent any
    tools {nodejs "NodeJs"}
    options {
        skipDefaultCheckout true
    }
    environment {
        BUILD_VERSION = "build.${currentBuild.number}"
        CLIENT_ID = credentials('anypoint.platform.cataloging.clientId')
        CLIENT_SECRET = credentials('anypoint.platform.cataloging.clientSecret')
        ANYPOINT_PLATFORM_ORG_ID = credentials('anypoint.platform.org.id')
    }
    parameters {
        string( name: 'API_NAME', defaultValue: "My API", description: 'The name of your API' )
        string( name: 'API_ASSET_ID', defaultValue: "my-api", description: 'The ID of your API' )
        string( name: 'API_DESCRIPTION', defaultValue: "Describe your API.......", description: 'The description of your API' )
        string( name: 'DOMAIN', defaultValue: "Product", description: 'The domain your API belongs to' )
        string( name: 'MARKET', defaultValue: "UK", description: 'The market your API supports' )
        string( name: 'ANYPOINT_PLATFORM_URL', defaultValue: 'anypoint.mulesoft.com', description: 'URL for Anypoint Platform (Default: https://anypoint.mulesoft.com - Production Anypoint Platform)' )
    }
    stages{
        stage('Checkout Release') {
            steps {
                script {
                    def githubUrl = scm.userRemoteConfigs[0].url
                    def branchName = scm.branches[0].name
                    print "GitHub URL: " + githubUrl
                    print "GitHub branch: " + branchName
                    echo "Checking out Release from GitHub..."
                    checkout([$class: 'GitSCM', 
                              branches: [[name: "${branchName}"]], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[ url: "${githubUrl}"]]])
                    }
                echo "Checkout Release completed: ${currentBuild.currentResult}"
            }
        }
        stage('Downloading Anypoint CLI') {
            steps {
                script {
                    sh """npm install -g anypoint-cli-v4"""
                }
            }    
            post {
                success {
                    echo "...Download of Anypoint CLI succeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Download of Anypoint CLI failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }
        stage('Download API template from Anypoint Platform') {
            steps {
                script {
                    sh """mkdir -p api;
                        cd api;
                        rm -rf ${env.API_ASSET_ID}
                        mkdir -p  ${env.API_ASSET_ID}
                        cd ${env.API_ASSET_ID}
                        echo "Download API template from Anypoint Platform'";
                        errorCode="Error";
                        commandOutput=\$(anypoint-cli-v4 designcenter project download 'API Template' api-template \
                        --host=${env.ANYPOINT_PLATFORM_URL} --organization=${env.ANYPOINT_PLATFORM_ORG_ID} \
                        --client_id=${env.CLIENT_ID} --client_secret=${env.CLIENT_SECRET});
                        if [[ \\"\$commandOutput\\" == *\\"\$errorCode\\"* ]]
                            then
                                echo "Error while dowmloading API Template - Please check the logs";
                                exit 1;
                            else
                                echo "Success while dowmloading API Template ";
                                exit 0;
                            fi
                        """   
                }
            }    
            post {
                success {
                    echo "...Downloading API template from Anypoint Platform succeed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Downloading API template from  Anypoint Platform failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }

        stage('Modify API template') {
            steps {
                
                dir("api/${env.API_ASSET_ID}/api-template") {
                    sh """
                        echo "Modify API Template";
                        errorCode="Error";                    
                        """
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: '<API-Name>',
                                          replace: "${env.API_NAME}",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'api.raml'
                                    )
                                  ]
                                )
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: 'api.raml',
                                          replace: "${env.API_ASSET_ID}.raml",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'exchange.json'
                                    )
                                  ]
                                )
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: 'api-template',
                                          replace: "${env.API_ASSET_ID}",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'exchange.json'
                                    )
                                  ]
                                )
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: 'API Template',
                                          replace: "${env.API_NAME}",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'exchange.json'
                                    )
                                  ]
                                )
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: 'version\": \"1.0.0\"',
                                          replace: "version\": \"0.0.0\"",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'exchange.json'
                                    )
                                  ]
                                )
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: "\"name\": \"${env.API_NAME}\"",
                                          replace: "\"name\": \"${env.API_NAME}\", \"organizationId\": \"${env.ANYPOINT_PLATFORM_ORG_ID}\",\"apiVersion\": \"v0\"",
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'exchange.json'
                                    )
                                  ]
                                )
                    sh """
                        echo "Change api file name";
                        errorCode="Error";
                        mv api.raml ${env.API_ASSET_ID}.raml;                     
                        """

                }
                
            }    
            post {
                success {
                    echo "...Modifying API template succeed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Modifying API templam failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }

        stage('Create new Design Center Project') {
            steps {
                script {
                    sh """
                        echo "Create new Design Center Project'";
                        errorCode="Error";
                        commandOutput=\$(anypoint-cli-v4 designcenter project create '${env.API_NAME}' --type raml \
                        --host=${env.ANYPOINT_PLATFORM_URL} --organization=${env.ANYPOINT_PLATFORM_ORG_ID} \
                        --client_id=${env.CLIENT_ID} --client_secret=${env.CLIENT_SECRET});
                        if [[ \\"\$commandOutput\\" == *\\"\$errorCode\\"* ]]
                            then
                                echo "Error while creating new Design Center Project - Please check the logs";
                                exit 1;
                            else
                                echo "Success while creating new Design Center Project ";
                                exit 0;
                            fi
                        """   
                }
            }    
            post {
                success {
                    echo "...Creating new Design Center Projectm succeeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Creating new Design Center Project failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }

        stage('Create Exchange Placeholder') {
            steps {
                dir("api/${env.API_ASSET_ID}/api-template") {
                    zip zipFile: 'api.zip';
                    sh """
                        echo "Create Exchange Placeholder'";
                        errorCode="Error";
                        commandOutput=\$(anypoint-cli-v4 exchange asset upload ${env.API_ASSET_ID}/0.0.0 --name '${env.API_NAME}' \
                        --description "${env.API_DESCRIPTION}" --type rest-api --files='{"raml.zip":"api.zip"}' --status development --categories '{"Market": "${env.MARKET}", "Domain" : "${env.DOMAIN}"}'\
                        --properties='{"apiVersion":"v0", "mainFile":"${env.API_ASSET_ID}.raml"}' \
                        --host=${env.ANYPOINT_PLATFORM_URL} --organization=${env.ANYPOINT_PLATFORM_ORG_ID} \
                        --client_id=${env.CLIENT_ID} --client_secret=${env.CLIENT_SECRET});
                        if [[ \\"\$commandOutput\\" == *\\"\$errorCode\\"* ]]
                            then
                                echo "Error while creating Exchange Placeholder- Please check the logs";
                                exit 1;
                            else
                                echo "Success while creating Exchange Placeholder  ";
                                exit 0;
                            fi
                        """   
                }
            }    
            post {
                success {
                    echo "...Creating Exchange Placeholder succeeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Creating Exchange Placeholder failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }

        stage('Upload API template to new Design Center Project') {
            steps {
                dir("api/${env.API_ASSET_ID}/api-template") {
                    sh """
                        echo "Upload API template to new Design Center Project'";
                        errorCode="Error";
                        rm -r exchange_modules;
                        rm api.zip;
                        commandOutput=\$(anypoint-cli-v4 designcenter project upload '${env.API_NAME}' . \
                        --host=${env.ANYPOINT_PLATFORM_URL} --organization=${env.ANYPOINT_PLATFORM_ORG_ID} \
                        --client_id=${env.CLIENT_ID} --client_secret=${env.CLIENT_SECRET});
                        if [[ \\"\$commandOutput\\" == *\\"\$errorCode\\"* ]]
                            then
                                echo "Error while uploading API template to new Design Center Project - Please check the logs";
                                exit 1;
                            else
                                echo "Success while uploading API template to new Design Center Project  ";
                                exit 0;
                            fi
                        """   
                }
            }    
            post {
                success {
                    echo "...Downloading API template from Anypoint Platform succeed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Downloading API template from  Anypoint Platform failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }




    }
    post {
        success {
            echo "All Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"    
        }
        failure {
            echo "Not So Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"
        }         
        always {
            echo "Pipeline result: ${currentBuild.result}"
            echo "Pipeline currentResult: ${currentBuild.currentResult}"
        }
    }
}
