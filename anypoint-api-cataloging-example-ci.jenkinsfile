#!groovy
pipeline {
    agent any
    tools {nodejs "NodeJs"}
    options {
        skipDefaultCheckout true
    }
    environment {
        BUILD_VERSION = "build.${currentBuild.number}"
        CLIENT_ID = credentials('anypoint.platform.cataloging.clientId')
        CLIENT_SECRET = credentials('anypoint.platform.cataloging.clientSecret')
        ANYPOINT_PLATFORM_ORG_ID = credentials('anypoint.platform.org.id')
    }
    parameters {
        string( name: 'API_NAME', defaultValue: "My API", description: 'The name of your API' )
        string( name: 'API_ASSET_ID', defaultValue: "my-api", description: 'The ID of your API' )
        string( name: 'ANYPOINT_PLATFORM_URL', defaultValue: 'anypoint.mulesoft.com', description: 'URL for Anypoint Platform (Default: https://eu1.anypoint.mulesoft.com - Production Anypoint Platform)' )
        string( name: 'ENVIRONMENT', defaultValue: "Sandbox", description: 'Environment where the API documentation will be deployed' )
    }
    stages{
        stage('Checkout Release') {
            steps {
                script {
                    def githubUrl = scm.userRemoteConfigs[0].url
                    def branchName = scm.branches[0].name
                    print "GitHub URL: " + githubUrl
                    print "GitHub branch: " + branchName
                    echo "Checking out Release from GitHub..."
                    checkout([$class: 'GitSCM', 
                              branches: [[name: "${branchName}"]], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[ url: "${githubUrl}"]]])
                    }
                echo "Checkout Release completed: ${currentBuild.currentResult}"
            }
        }
        stage('Downloading Anypoint CLI') {
            steps {
                script {
                    sh """npm install -g anypoint-cli-v4"""
                }
            }    
            post {
                success {
                    echo "...Download of Anypoint CLI succeded for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Download of Anypoint CLI failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }
        stage('Download API template from Anypoint Platform') {
            steps {
                script {
                    sh """mkdir -p api;
                        cd api;
                        mkdir -p  ${env.API_ASSET_ID}
                        cd ${env.API_ASSET_ID}
                        echo "Download API template from Anypoint Platform'";
                        errorCode="Error";
                        commandOutput=\$(anypoint-cli-v4 designcenter project download 'API Template' api-template \
                        --host=${env.ANYPOINT_PLATFORM_URL} --organization=${env.ANYPOINT_PLATFORM_ORG_ID} \
                        --environment=${env.ENVIRONMENT} \
                        --client_id=${env.CLIENT_ID} --client_secret=${env.CLIENT_SECRET});
                        if [[ \\"\$commandOutput\\" == *\\"\$errorCode\\"* ]]
                            then
                                echo "Error while dowmloading API Template - Please check the logs";
                                exit 1;
                            else
                                echo "Success while dowmloading API Template ";
                                exit 0;
                            fi
                        """   
                }
            }    
            post {
                success {
                    echo "...Downloading API template from Anypoint Platform succeed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Downloading API template from  Anypoint Platform failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }

        stage('Modify API template') {
            steps {
                
                dir('api/${env.API_ASSET_ID}/api-template') {
                    sh """
                        echo "Modify API Template";
                        errorCode="Error";
                        rm -r exchange_modules;                        
                        """
                    contentReplace(
                                  configs: [
                                    fileContentReplaceConfig(
                                      configs: [
                                        fileContentReplaceItemConfig(
                                          search: '(?:title|description): API Template',
                                          replace: '${env.API_NAME}',
                                          matchCount: 1,
                                          verbose: false,
                                        )
                                      ],
                                      fileEncoding: 'UTF-8',
                                      lineSeparator: 'Unix',
                                      filePath: 'api.raml'
                                    )
                                  ]
                                )

                }
                
            }    
            post {
                success {
                    echo "...Modifying API template succeed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                } 
                failure {
                    echo "...Modifying API templam failed for ${env.BUILD_VERSION}: ${currentBuild.currentResult}"
                }
            }
        }


    }
    post {
        success {
            echo "All Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"    
        }
        failure {
            echo "Not So Good: ${env.RELEASE_VERSION}: ${currentBuild.currentResult}"
        }         
        always {
            echo "Pipeline result: ${currentBuild.result}"
            echo "Pipeline currentResult: ${currentBuild.currentResult}"
        }
    }
}
